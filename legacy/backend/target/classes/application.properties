# Application Configuration
spring.application.name=movie-recommender-backend
server.port=${PORT:8080}

# Database Configuration for Heroku
spring.datasource.url=${DATABASE_URL:jdbc:postgresql://localhost:5432/movierecommender}
spring.datasource.username=${DB_USERNAME:postgres}
spring.datasource.password=${DB_PASSWORD:password}
spring.datasource.driver-class-name=org.postgresql.Driver

# JPA Configuration
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=false
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.properties.hibernate.jdbc.batch_size=20
spring.jpa.properties.hibernate.order_inserts=true
spring.jpa.properties.hibernate.order_updates=true

# Redis Configuration for Heroku
spring.data.redis.url=${REDIS_URL:redis://localhost:6379}
spring.data.redis.timeout=2000ms
spring.cache.type=redis
spring.cache.redis.time-to-live=300000

# JWT Configuration
app.jwt.secret=${JWT_SECRET:mySecretKey123456789012345678901234567890}
app.jwt.expiration-ms=86400000

# External API Keys
tmdb.api.key=${TMDB_API_KEY:your_tmdb_api_key}
tmdb.base.url=https://api.themoviedb.org/3

# Python ML Service Configuration
ml.service.url=${ML_SERVICE_URL:http://localhost:5000}
ml.service.timeout=30000

# Letterboxd Data Collection Configuration
letterboxd.rate.limit.requests=10
letterboxd.rate.limit.window=60
letterboxd.batch.size=50
letterboxd.max.retries=3

# Dataset Thresholds
dataset.min.users=100
dataset.min.ratings=10000
dataset.retrain.threshold=0.1
dataset.cleanup.days=30

# Actuator Configuration
management.endpoints.web.exposure.include=health,info,metrics
management.endpoint.health.show-details=always
management.metrics.export.prometheus.enabled=true

# Logging Configuration
logging.level.com.movierecommender=INFO
logging.level.org.springframework.security=DEBUG
logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss} - %msg%n
logging.file.name=logs/application.log